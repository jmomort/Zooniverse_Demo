// Generated by CoffeeScript 1.6.3
(function() {
  var $, Api, Classification, Classifier, FakeSubject, Subject, TopBar, User, api, classifier, fsubj, subj, topBar, _i, _len, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  if (window.app == null) {
    window.app = {};
  }

  Api = zooniverse.Api;

  api = new Api({
    project: 'planet_four'
  });

  TopBar = zooniverse.controllers.TopBar;

  topBar = new TopBar;

  topBar.el.appendTo(document.body);

  $ = window.jQuery;

  Subject = zooniverse.models.Subject;

  Classification = zooniverse.models.Classification;

  User = zooniverse.models.User;

  FakeSubject = (function(_super) {
    __extends(FakeSubject, _super);

    function FakeSubject() {
      _ref = FakeSubject.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    FakeSubject.configure("FakeSubject", "parent", "child", "p_def", "c_def");

    FakeSubject.prototype.toSentence = function() {
      return [this.child, "is a kind of", this.parent].join(' ');
    };

    return FakeSubject;

  })(Spine.Model);

  fsubj = FakeSubject.fromJSON("[\n{\"parent\":\"abdominal disorder\",\"child\":\"diabetes\",\"p_def\":\"A disorder of the abdomen\",\"c_def\":\"a disease that affects insulin\",\"id\":\"c-0\"}\n]");

  for (_i = 0, _len = fsubj.length; _i < _len; _i++) {
    subj = fsubj[_i];
    subj.save();
  }

  console.log(JSON.stringify(FakeSubject));

  Classifier = (function(_super) {
    __extends(Classifier, _super);

    Classifier.prototype.onChangeAnnotate = function(e) {
      var value;
      value = $(e.target).val();
      this.classification.removeAnnotation(this.classification.annotations[0]);
      return this.classification.annotate({
        quality: value
      });
    };

    Classifier.prototype.onClickNext = function() {
      console.log(this.classification.annotations);
      console.log('Sending classification');
      return Subject.next();
    };

    Classifier.prototype.events = {
      'change input[name="quality"]': 'onChangeAnnotate',
      'click button[name="next"]': 'onClickNext'
    };

    function Classifier() {
      var _this = this;
      Classifier.__super__.constructor.apply(this, arguments);
      User.on('change', function(e, user) {
        return Subject.next();
      });
      Subject.on('select', function() {
        _this.classification = new Classification({
          subject: Subject.current
        });
        _this.classification.annotate({
          quality: "unknown"
        });
        return _this.render();
      });
    }

    Classifier.prototype.render = function() {
      fsubj = FakeSubject.first();
      return this.el.html(" <div class=\"classifier\">\n <div class=\"instructions\">Using the definitions provided, determine if the following fact is correct.<br/>\nIf for any reason you wish to skip, select \"Unknown\".\n </div>\n </br>\n <div class=\"def1\"><i>" + fsubj.child + "</i>: " + fsubj.c_def + "	</div>\n </br>\n <div class=\"def2\"><i>" + fsubj.parent + "</i>: " + fsubj.p_def + "	</div>\n </br>\n <div class=\"statement\"> <h2><i>" + fsubj.child + "</i> is a kind of <i>" + fsubj.parent + "</i></h2>	</div>\n <div class=\"response\">\n <input type=\"radio\" name=\"quality\" value=\"correct\" id=\"correct\" class=\"input-hidden\" />\n <label for=\"correct\"><button class=\"response_selection\">Correct</button></label>\n &nbsp;\n <input type=\"radio\" name=\"quality\" value=\"incorrect\" id=\"incorrect\" class=\"input-hidden\"/>\n <label for=\"incorrect\"><button class=\"response_selection\">Incorrect</button></label>\n &nbsp;\n <input type=\"radio\" name=\"quality\" value=\"unknown\" id=\"unknown\" class=\"input-hidden\"/>\n <label for=\"unknown\"><button class=\"response_selection\">Unknown</button></label >\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n <button name=\"next\" class=\"next_button\">Next</button>\n </div>\n </div>");
    };

    return Classifier;

  })(Spine.Controller);

  classifier = new Classifier;

  classifier.el.appendTo(document.body);

  User.fetch();

  window.app.main = {
    api: api,
    topBar: topBar,
    classifier: classifier
  };

}).call(this);

/*
//@ sourceMappingURL=index.map
*/
